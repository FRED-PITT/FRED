#!/usr/bin/perl

##########################################################################################
## 
##  This file is part of the FRED system.
##
## Copyright (c) 2010-2012, University of Pittsburgh, John Grefenstette, Shawn Brown, 
## Roni Rosenfield, Alona Fyshe, David Galloway, Nathan Stone, Jay DePasse, 
## Anuroop Sriram, and Donald Burke
## All rights reserved.
##
## Copyright (c) 2013-2021, University of Pittsburgh, John Grefenstette, Robert Frankeny,
## David Galloway, Mary Krauland, Michael Lann, David Sinclair, and Donald Burke
## All rights reserved.
##
## FRED is distributed on the condition that users fully understand and agree to all terms of the 
## End User License Agreement.
##
## FRED is intended FOR NON-COMMERCIAL, EDUCATIONAL OR RESEARCH PURPOSES ONLY.
##
## See the file "LICENSE" for more information.
##
##########################################################################################

use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);

# use default api_key if it exists
my $api_key = $ENV{FRED_API_KEY};
$api_key = "none" if not $api_key;
# print "api_key = '$api_key'\n";

my @vars = ();
my @colors = ();
my @pointsizes = ();
my @periods = ();
my $pt = "99 99 99 99 99 99";
my $caption_colors = "";
my $census_tracts = 0;
my $country = "usa";
my $play = "";
my $filled = 0;
my $help = 0;
my $grid = 0;
my $key = "";
my $max = 0;
my $parallelism = 50;
my $run = 1;
my $term = "png";
my $title = "FRED Simulation";
my $subtitle = " ";
my $subsubtitle = " ";
my $lightness = 0;
my $movie_format = "mp4";
my $moviefile = "";
my $linewidth = 2;
my $xmin = 0;
my $xmax = 0;
my $ymin = 0;
my $ymax = 0;
my $border = 0;
my $start = 0;
my $finish = 0;
my $interval = 1;
my $google = 1;
my $shapefile = 1;
my $left_caption = "";
my $center_caption = "";
my $right_caption = "";
my $framerate = 3;
my $show_names = 1;
my $keep = 0;

my $opt_result = GetOptions(
			    "v=s" => \@vars,
			    "vars=s" => \@vars,
			    "colors=s" => \@colors,
			    "c=s" => \@colors,
			    "pointsizes=s" => \@pointsizes,
			    "ps=s" => \@pointsizes,
			    "pt=s" => \$pt,
			    "periods=s" => \@periods,
			    "api_key=s" => \$api_key,
			    "border=i" => \$border,
			    "left_caption=s" => \$left_caption,
			    "center_caption=s" => \$center_caption,
			    "right_caption=s" => \$right_caption,
			    "caption_colors=s" => \$caption_colors,
			    "start=i" => \$start,
			    "interval=i" => \$interval,
			    "census_tracts" => \$census_tracts,
			    "country=s" => \$country,
			    "display=i" => \$play,
			    "play=i" => \$play,
			    "p=i" => \$play,
			    "filled=i" => \$filled,
			    "finish=i" => \$finish,
			    "framerate=s" => \$framerate,
			    "google=i" => \$google,
			    "grid=i" => \$grid,
			    "h" => \$help,
			    "help" => \$help,
			    "k=s" => \$key,
			    "key=s" => \$key,
			    "lightness=i" => \$lightness,
			    "max=f" => \$max,
			    "output=s" => \$moviefile,
			    "o=s" => \$moviefile,
			    "parallelism=i" => \$parallelism,
			    "run=i" => \$run,
			    "term=s" => \$term,
			    "title=s" => \$title,
			    "subtitle=s" => \$subtitle,
			    "show_names=i" => \$show_names,
			    "subsubtitle=s" => \$subsubtitle,
			    "shapefile=i" => \$shapefile,
			    "movieformat=s" => \$movie_format,
			    "lw=f" => \$linewidth,
			    "x=f" => \$xmin,
			    "X=f" => \$xmax,
			    "y=f" => \$ymin,
			    "Y=f" => \$ymax,
			    "keep" => \$keep,
			   );

my $usage = <<EOH;
usage: $0 [ options ], where options include [default values]
  --api_key <key>: if set, use this api_key to obtain Google maps ["none"]
  --border 0/1: if set, display border around map with lat-lon labels [0]
  --census_tracts 0/1: plot census tracts [0]
  --country <name> : plot the named country [usa]
  --disease <id> : plot results for the disease id [0]
  --filled <0/1>:  if set, plot filled curves [0]
  --google : if set, use a google map as a background image [1]
  --grid <0/1>: if set, show grid. [0]
  --help: print this help message
  --households <0/1> : plot all households [0]
  --incidence <0/1> : if set and dots is set, plot households with incidence [0]
  --infectious <0/1> : if set and dots is set, plot households with infectious members [1]
  --interval <n> : movie include every nth day [1] 
  --key <id> : plot the job with given id [none - must be specified]
  --lightness <n> : set lightness of background map [0]
  --lw <n> : use linewidth n to outline counties [2]
  --max <val> : use the given value as the maximum for color plots [10]
  --movie_format <str> : use the specified movie format [mp4]
  --parallelism <n> : plot n maps in parallel [10]
  --play <0/1> : if set, play the movie after it is made [0]
  --ps 'n1 n2 n3' : plot dots using point sizes [ "0.002 0.002 0.002" ] 
  --recovered <0/1> :  if set and dots is set, plot households with recovered members [1]
  --hc_unav <0/1> : plot all households with health care unavailable[0]
  --primary_hc_unav <0/1> : plot all households with primary health care unavailable [0]
  --accept_insr_hc_unav <0/1> : plot all households with health care accepting their insurance unavailable [0] 
  --run <n> : plot results of run n [1]
  --shapefile <0/1> : if set, draw the shapefile for each fips code
  --show_names <0/1>: if set, show local place names
  --start day: start movie on specified day [0]
  --subtitle <str> : subtitle for each map [" "]
  --term <type> : plot using the specified terminal type [png]
  --title <str> : title for each map ["FRED Simulation"]
  -x <xmin> : min value for x axis 
  -X <xmax> : max value for x axis 
  -y <ymin> : min value for y axis
  -Y <xmax> : max value for x axis
EOH

die $usage if $help;
die $usage if not $key;

my $FRED = $ENV{FRED_HOME};
die "$0: ERROR. Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $cwd = `pwd`;
chomp $cwd;

my $bindir = "$FRED/bin";
my $id = `$bindir/fred_id $key`;
chomp $id;
die "$0: ERROR. UNKNOWN key: $key\n" if $id eq "UNKNOWN";

my $outdir = "$FREDRESULTS/JOB/$id/OUT";
chdir $outdir;

# the following permit these options to have multiple values separated
# by commas e.g. -v X,Y,Z is the same as -v X -v Y -v Z
@vars = split(/,/, join(',',@vars));
@colors = split(/,/, join(',',@colors));
@pointsizes = split(/,/, join(',',@pointsizes));
@periods = split(/,/, join(',',@periods));

die $usage if not @vars;
my $varlist = join(" ", @vars);

# verify variable list
my $visdir = "$outdir/RUN$run/VIS";
if (not -d $visdir) {
  die "$0: RUN_ERROR -- Can't find VIS directory for $outdir/RUN$run\n";
}
my $varfile = "$visdir/VARS";
if (not -e $varfile) {
  die "$0: VAR_ERROR -- Can't find variable list VARS in $outdir/RUN$run\n";
}
open FH,$varfile;
my @actualvars = ();
while (my $line = <FH>) {
  chomp $line;
  push @actualvars, $line;
}
close FH;
# print "|$_| " for @actualvars; print "\n"; exit;
for my $v (@vars) {
  my $ok = grep { $_ eq $v } @actualvars;
  die "$0: VAR_ERROR -- Can't find $v in VARS in $outdir/RUN$run\n" if not $ok;
}

my $colorlist = "blue red black green orange purple";
$colorlist = join(" ", @colors) if @colors;
$caption_colors = $colorlist if $caption_colors eq "";

# add default values if needed
while (scalar @pointsizes < scalar @vars) {
  push @pointsizes, 0.002;
}
my $ps = join(" ", @pointsizes) if @pointsizes;

# add default values if needed
while (scalar @periods < scalar @vars) {
  push @periods, 1;
}
my $period = join(" ", @periods) if @periods;

my $command = "fred_make_maps --api_key $api_key --census_tracts $census_tracts --country $country --key $key --parallelism $parallelism --run $run --term $term --title '$title' --subtitle '$subtitle' --subsubtitle '$subsubtitle' --lw $linewidth -x $xmin -X $xmax -y $ymin -Y $ymax --grid $grid --border $border --start $start --interval $interval --google $google --shapefile $shapefile --lightness $lightness --finish $finish --vars '$varlist' --ps '$ps' --pt '$pt' --period '$period' --color '$colorlist' --caption_colors '$caption_colors' --left_caption '$left_caption' --center_caption '$center_caption' --right_caption '$right_caption' --show_names $show_names";

# print "$command\n";
system $command;

my $vis = "RUN$run/VIS/MAPS";
if (not -d $vis) {
  die "$0: can't find MAPS directory: $vis\n";
}

chdir $vis;
$moviefile = "$key.$movie_format" if $moviefile eq "";
$moviefile = "$cwd/$moviefile";
if (not -e "FAILED") {
  $command = "ffmpeg -nostdin -loglevel quiet -y -f image2 -framerate $framerate -i map%04d.png -f mp4 -vcodec libx264 -pix_fmt yuv420p -s 640x640 movie.$movie_format";
  system "$command";
  system "cp movie.$movie_format $moviefile";

  # clean up data files
  if (not $keep) {
    system "rm -f data* map*";
  }

  chdir $cwd;
  system "open $moviefile" if $play;
}
else {
  print "$0: fred_make_maps FAILED:\n";
  system "cat FAILED";
  die "$0 quitting\n";
}

