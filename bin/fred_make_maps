#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);
$| = 1;

# use default api_key if it exists
my $api_key = $ENV{FRED_API_KEY};
$api_key = "none" if not $api_key;
# print "api_key = '$api_key'\n";

my $vars = "none";
my $ps = "1";
my $pt = "5";
my $colors = "blue";
my $census_tracts = 0;
my $country = "usa";
my $condition_id = 0;
my $filled = 0;
my $help = 0;
my $key = "";
my $lightness = 0;
my $max = 0;
my $parallelism = 10;
my $run = 1;
my $term = "png";
my $title = "FRED Simulation";
my $subtitle = " ";
my $subsubtitle = " ";
my $linewidth = 2;
my $xmin = 0;
my $xmax = 0;
my $ymin = 0;
my $ymax = 0;
my $grid = 0;
my $border = 0;
my $start = 0;
my $finish = 0;
my $interval = 1;
my $google = 1;
my $use_shapefile = 1;
my $bottom_left = "";
my $bottom_center = "";
my $bottom_right = "";
my $bottom_colors = "black black black";
my $show_names = 0;

my $opt_result = GetOptions(
			    "api_key=s" => \$api_key,
			    "border=i" => \$border,
			    "bottom_left=s" => \$bottom_left,
			    "bottom_center=s" => \$bottom_center,
			    "bottom_right=s" => \$bottom_right,
			    "colors=s" => \$colors,
			    "bottom_colors=s" => \$bottom_colors,
			    "start=i" => \$start,
			    "interval=i" => \$interval,
			    "census_tracts=i" => \$census_tracts,
			    "country=s" => \$country,
			    "condition=i" => \$condition_id,
			    "filled=i" => \$filled,
			    "finish=i" => \$finish,
			    "h" => \$help,
			    "help" => \$help,
			    "google=i" => \$google,
			    "grid=i" => \$grid,
			    "g=i" => \$grid,
			    "key=s" => \$key,
			    "lightness=i" => \$lightness,
			    "parallelism=i" => \$parallelism,
			    "ps=s" => \$ps,
			    "pt=s" => \$pt,
			    "run=i" => \$run,
			    "show_names=i" => \$show_names,
			    "subtitle=s" => \$subtitle,
			    "subsubtitle=s" => \$subsubtitle,
			    "term=s" => \$term,
			    "title=s" => \$title,
			    "vars=s" => \$vars,
			    "shapefile=i" => \$use_shapefile,
			    "lw=f" => \$linewidth,
			    "x=f" => \$xmin,
			    "X=f" => \$xmax,
			    "y=f" => \$ymin,
			    "Y=f" => \$ymax,
			   );

my $usage = <<EOH;
usage: $0 [ options ], where options include:
  --api_key <key>: if set, use this api_key to obtain Google maps ["none"]
  --border 0/1: if set, display border around map with lat-lon labels [0]
  --census_tracts 0/1: plot census tracts [0]
  --cf 0/1: plot daily case_fatalities [0]
  --country <name> : plot the named country [usa]
  --display <0/1> : if set, play the movie after it is made [0]
  --filled <0/1>:  if set, plot filled curves [0]
  --google : if set, use a google map as a background image [1]
  --grid <0/1>: if set, show grid. [0]
  --help: print this help message
  --households <0/1> : plot all households [0]
  --incidence <0/1> : if set and dots is set, plot households with incidence [0]
  --infectious <0/1> : if set and dots is set, plot households with infectious members [1]
  --interval <n> : movie include every nth day [1] 
  --key <id> : plot the job with given id [none - must be specified]
  --lw <n> : use linewidth n to outline counties [2]
  --max <val> : use the given value as the maximum for color plots [10]
  --movie_format <str> : use the specified movie format [mp4]
  --parallelism <n> : plot n maps in parallel [10]
  --recovered <0/1> :  if set and dots is set, plot households with recovered members [1]
  --primary_hc_unav <0/1> : plot all households with primary health care unavailable [0]
  --accept_insr_hc_unav <0/1> : plot all households with health care accepting their insurance unavailable [0]
  --hc_deficit <0/1> : plot households whose primary healthcare is unavailable by census tract
  --run <n> : plot results of run n [1]
  --shapefile <0/1> : if set, draw the shapefile for each fips code
  --show_names <0/1>: if set, show local place names
  --start day: start movie on specified day [0]
  --subtitle <str> : subtitle for each map [" "]
  --term <type> : plot using the specified terminal type [png]
  --tcf 0/1: plot total case_fatalities [0]
  --title <str> : title for each map ["FRED Simulation"]
  -x <xmin> : min value for x axis 
  -X <xmax> : max value for x axis 
  -y <ymin> : min value for y axis
  -Y <xmax> : max value for x axis
EOH

die $usage if $help;
die $usage if not $key;

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $FREDRESULTS = $ENV{FRED_RESULTS};
$FREDRESULTS = "$ENV{FRED_HOME}/RESULTS" if not $FREDRESULTS;

my $bindir = "$FRED/bin";
my $id = `$bindir/fred_id $key`;
chomp $id;
die "$0: UNKNOWN key: $key\n" if $id eq "UNKNOWN";

my $outdir = "$FREDRESULTS/JOB/$id/OUT";
chdir $outdir or die "Can't chdir to $outdir\n";
# print "CWD = $outdir\n";

# get dates
my @dates  = ();
my $datefile = "$FREDRESULTS/JOB/$id/OUT/RUN1/DAILY/Date.txt";
if (-e $datefile) {
  open FH, $datefile;
  while (my $line = <FH>) {
    chomp $line;
    my ($n, $date) = split " ", $line;
    push @dates, $date;
  }
  close FH;
}
else {
  die "$0: Can't file $datefile";
}
# print "dates:\n"; print "$_\n" for @dates; print "XXX\n";

# determine number of days
my $days = scalar @dates;
$days = $finish if (0 < $finish and $finish < $days);
# print "days = $days\n";

# limit parallelism to number of days
$parallelism = $days if ($days < $parallelism);

# find visualization dir
my $vis = "$outdir/RUN$run/VIS";
chdir $vis or die "Can't chdir to $vis\n";
# print "CWD vis = $vis\n";

# make MAPS if needed
if (not -d "MAPS") {
  system "mkdir -p MAPS";
  die "Can't mkdir MAPS\n" if not -d "MAPS";
} 
else {
   # print "MAPS already exists\n";
}

# clear out old data
chdir "MAPS" or die "$0: Can't chdir to MAPS";
system "rm -f BBOX FAILED googlemap.png map* fred_map_param* *.log";

# get the fips codes
die "$0: Can't find $vis/COUNTIES" if not -e "$vis/COUNTIES"; 
system "cp $vis/COUNTIES FIPS";



# get census tract shapefiles if needed
if ($country eq "usa" and $census_tracts eq 1) {
  my $shapedir = "$FRED/SHAPEFILES/2010";
  my $zipfile = "x";
  my $shapefiledir ="$FRED/data/country/$country/SHAPES";
  if (not -d $shapefiledir) {
    system "mkdir -p $shapefiledir";
    my @fips = ();
    my $fipsfile = "FIPS";
    open FIPS, $fipsfile or die "$0: Can't find location code file $fipsfile\n";
    @fips = <FIPS>;
    close FIPS;
    for my $county (@fips) {
      chomp $county;
      $zipfile = "tl_2010_$county\_tract10";
      system "unzip $shapedir/$zipfile >> $0.log ";
      system "$bindir/fred_read_shapefile $zipfile $shapefiledir >> $0.log";
    }
  }
  # get the census tract fips codes
  die "$0: Can't find $vis/CENSUS_TRACTS" if not -e "$vis/CENSUS_TRACTS";
  system "cp $vis/CENSUS_TRACTS FIPS";
}

# prepare for cumulative CFs if needed
my @v = split " ", $vars;
if (grep(/TCF/,@v)) {
  my $dir = "$vis/CF";
  if (-e $dir) {
    for (my $day = 0; $day <= $days; $day++) {
      if ($day==0) {
	system "cp $dir/households-0.txt $dir/total-0.txt";
      }
      else {
	my $prev = $day-1;
	system "cat $dir/total-$prev.txt $dir/households-$day.txt > $dir/total-$day.txt";
      }
    }  
  }
}

##
## MAIN LOOP
##
print "making maps ";
my $started = 0;
my @cmds = ();
my @wait = ();
my $index = 0;
for (my $day = $start; $day < $days; $day += $interval) {

  my $mapname = sprintf("map%04d.$term",$index);
  push @wait, $mapname;
  $index++;

  # print "make_map $mapname\n";
  make_map($day, $mapname, $vars);

  # print "$mapname\n";
  print ".";

  $started++;
  if (($day eq $start) or ($started eq $parallelism)) {
    for my $file (@wait) {
      while (not -s $file) {
	if (-e "FAILED") {
	  die "$0 failed\n";
	}
	sleep 1;
      }
    }
    $started = 0;
  }
}
for my $file (@wait) {
  while (not -s $file) { sleep 1; }
}
# system "ls -l map*";
# system "rm -rf PCT* RAW* SHAPES load* .done* $shapefile.*";
print " done\n";
exit;


##################################################

sub make_map {
  my ($day, $mapname, $vars) = @_;
  my @x = split " ", $vars;
  my $datafiles = "";
  for my $v (@x) {
    $datafiles .= "$vis/$v/households-$day.txt ";
  }
  my $var = shift @x;
  my $my_date = "";
  if (@dates) {
    $my_date = "";
    # print "day = $day\n";
    $my_date = $dates[$day] if $day < scalar @dates;
    chomp $my_date;
    $my_date =~ s/^.*? //;
  }

  my $cmd = "$bindir/fred_make_map --day $day --date '$my_date' --datafile '$datafiles' --api_key $api_key --country $country --term $term --title '$title' --subtitle '$subtitle' --subsubtitle '$subsubtitle' --lw $linewidth -x $xmin -X $xmax -y $ymin -Y $ymax --grid $grid --border $border --google $google --shapefile $use_shapefile --lightness $lightness --ps '$ps' --pt '$pt' --colors '$colors' --bottom_colors '$bottom_colors' --mapname '$mapname' --display 0  --bottom_left '$bottom_left' --bottom_center '$bottom_center' --bottom_right '$bottom_right' --show_names $show_names ";
  # print "$command\n"; exit;

  system("($cmd; touch .done.$day)&");
  
}

