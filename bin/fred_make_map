#!/usr/bin/perl
use strict;
use warnings;
use Env;
use Getopt::Long qw(:config no_ignore_case bundling);
$| = 1;

# define line styles
my %ls = ( 
	  "blue", 1,
	  "skyblue", 2,
	  "sea-green", 3,
	  "green", 4,
	  "greenyellow", 5,
	  "yellow", 6,
	  "orange", 7,
	  "orange-red", 8,
	  "red", 9,
	  "beige", 10,
	  "light-goldenrod", 11,
	  "medium-blue", 12,
	  "dark-green", 13,
	  "gray", 14,
	  "gray10", 15,
	  "black", 16,
	  "white", 17
	 );

# use default api_key if it exists
my $api_key = $ENV{FRED_API_KEY};
$api_key = "none" if not $api_key;
# print "api_key = '$api_key'\n";

my $background = "";
my $cmd = "";
my $datafiles = "";
my $display = 1;
my $ls_list = "1";
my $ps = "0.5";
my $pt = "5";
my $colors = "blue red green black";
my $country = "usa";
my $help = 0;
my $key = "";
my $lightness = 0;
my $term = "png";
my $mapname = 'map.' . $term;
my $title = "FRED Simulation";
my $subtitle = " ";
my $subsubtitle = " ";
my $day = 0;
my $date = "";
my $linewidth = 2;
my $xmin = 0;
my $xmax = 0;
my $ymin = 0;
my $ymax = 0;
my $grid = 0;
my $border = 0;
my $google = 1;
my $use_shapefile = 1;
my $bottom_left = "";
my $bottom_center = "";
my $bottom_right = "";
my $bottom_colors = "black black black";
my $show_names = 0;

my $opt_result = GetOptions(
			    "datafiles=s" => \$datafiles,
			    "display=i" => \$display,
			    "ps=s" => \$ps,
			    "pt=s" => \$pt,
			    "color_list=s" => \$colors,
			    "colors=s" => \$colors,
			    "api_key=s" => \$api_key,
			    "border=i" => \$border,
			    "bottom_left=s" => \$bottom_left,
			    "bottom_center=s" => \$bottom_center,
			    "bottom_right=s" => \$bottom_right,
			    "bottom_colors=s" => \$bottom_colors,
			    "country=s" => \$country,
			    "h" => \$help,
			    "help" => \$help,
			    "google=i" => \$google,
			    "grid=i" => \$grid,
			    "g=i" => \$grid,
			    "lightness=i" => \$lightness,
			    "term=s" => \$term,
			    "mapname=s" => \$mapname,
			    "title=s" => \$title,
			    "subtitle=s" => \$subtitle,
			    "show_names=i" => \$show_names,
			    "subsubtitle=s" => \$subsubtitle,
			    "day=i" => \$day,
			    "date=s" => \$date,
			    "shapefile=i" => \$use_shapefile,
			    "lw=f" => \$linewidth,
			    "x=f" => \$xmin,
			    "X=f" => \$xmax,
			    "y=f" => \$ymin,
			    "Y=f" => \$ymax,
			   );

my $usage = <<EOH;
usage: $0 [ options ], where options include:
  --api_key <key>: if set, use this api_key to obtain Google maps ["none"]
  --border 0/1: if set, display border around map with lat-lon labels [0]
  --color "color1 color2 ..." : list of colors for datafiles
  --country <name> : plot the named country [usa]
  --datafiles 'file1 files2 ...' [""] (REQUIRED)
  --day day-counters : simulation day [0]
  --date <str> : simulation date [""]
  --display 0/1: if set, display the map [1]
  --google : if set, use a google map as a background image [1]
  --grid <0/1>: if set, show grid. [0]
  --help: print this help message
  --lw <n> : use linewidth n to outline counties [2]
  --max <val> : use the given value as the maximum for color plots [10]
  --ps "point-size1 point-size2 ..." : list of point sizes for datafiles
  --pt "point-type1 point-type2 ..." : list of point types for datafiles
  --shapefile <0/1> : if set, draw the shapefile for each fips code
  --show_names <0/1>: if set, show local place names
  --subtitle <str> : subtitle for each map [" "]
  --term <type> : plot using the specified terminal type [png]
  --title <str> : title for each map ["FRED Simulation"]
  -x <xmin> : min value for x axis 
  -X <xmax> : max value for x axis 
  -y <ymin> : min value for y axis
  -Y <xmax> : max value for x axis
EOH

die $usage if $help;
die "$0: datafiles not specified\n$usage" if not $datafiles;

my $FRED = $ENV{FRED_HOME};
die "$0: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my @fips = ();
my $shapefiles = "";
system "rm -f $mapname";

my $fipsfile = "FIPS";
open FIPS, $fipsfile or die "$0: Can't find location code file $fipsfile\n";
@fips = <FIPS>;
close FIPS;

# log activity
system "echo ================================ >> fred_make_maps.log; date >> fred_make_maps.log";

if ($country eq "usa") {

  # get list of fips codes
  my $shapefiledir ="$FRED/data/country/$country/SHAPES";

  # get the list of shapefiles for the indicated FIPS
  for my $f (@fips) {
    chomp $f;
    $shapefiles .= "$shapefiledir/$f.txt ";
  }
  # system "echo shapefiles = $shapefiles >> fred_make_maps.log";
}

my $force_xmin = $xmin;
my $force_xmax = $xmax;
my $force_ymin = $ymin;
my $force_ymax = $ymax;

my $force = (($force_xmin != 0) or ($force_xmax != 0) or ($force_ymin != 0) or ($force_ymax != 0));

if (($country eq "usa") and (scalar @fips eq 1) and $google and not -e "googlemap.png" and not $force) {
  system "echo $0: using existing county image >> fred_make_maps.log";
  # use background image if it already exists
  my $loc = sprintf("%05d", $fips[0]);
  my $state = substr($loc,0,2);
  my $mapsdir = "$FRED/data/country/$country/MAPS/$state";
  # system "echo $mapsdir; ls -l $mapsdir";
  my $mapname = "$loc.png";
  my $background_map = "$mapsdir/$mapname";
  # print "|$background_map|\n";

  if (-e $background_map) {
    system "cp $background_map googlemap.png";
    system "echo cp $background_map googlemap.png >> fred_make_maps.log";
    system "cp $mapsdir/$loc.bbox BBOX";
    system "echo cp $mapsdir/$loc.bbox BBOX >> fred_make_maps.log";
    # $use_shapefile = 0;
  }
}

if (not -e "BBOX") {
  # create a bounding box based on the shapefiles and write coordinates to file BBOX
  make_bbox();
}

if ($google and not -e "googlemap.png") {
  $cmd = "fred_get_googlemap $api_key $lightness $show_names 2> /dev/null";
  # print "$0: $cmd\n";
  system "echo $cmd >> fred_make_maps.log";
  system "$cmd";
  # sleep 2;
  # make sure googlemap.png exists
  if (not -e "googlemap.png") {
    `date > FAILED; echo $0 >> FAILED`;
    print "$0: FAILED TO CREATE googlemap.png";
    system "echo FAILED TO CREATE googlemap.png >> fred_make_maps.log";
    exit;
  }
}

if ($google) {
  $background = "googlemap.png";
  # store this googlemap for future use
  if (scalar @fips == 1 and not $force) {
    my $loc = sprintf("%05d", $fips[0]);
    my $mapname = "$loc.png";
    my $state = substr($mapname,0,2);
    my $statemapsdir = "$FRED/data/country/$country/MAPS/$state";
    system "mkdir -p $statemapsdir";
    system "cp googlemap.png $statemapsdir/$mapname" if not -e "$statemapsdir/$mapname";
    system "cp BBOX $statemapsdir/$loc.bbox" if not -e "$statemapsdir/$loc.bbox";
  }
}


$ls_list = get_ls_list($colors);
my $bottom_color_list = get_ls_list($bottom_colors);
# print "ls_list = |$ls_list|\n"; exit;

# at this point we have a BBOX file and a googlemap.png file if $google == 1

# create fred_map_params.txt file
my $paramsfile = "fred_map_params_day_$day.txt";
open PARAM, ">$paramsfile";
print PARAM "my_title = '$title'\n";
print PARAM "my_subtitle = '$subtitle'\n";
print PARAM "my_subsubtitle = '$subsubtitle'\n";
print PARAM "show_subsubtitle = '$subsubtitle'\n";
print PARAM "bottom_left = '$bottom_left'\n";
print PARAM "bottom_center = '$bottom_center'\n";
print PARAM "bottom_right = '$bottom_right'\n";
print PARAM "bottom_colors = '$bottom_color_list'\n";
print PARAM "day = $day\n";
print PARAM "my_date = '$date'\n";
print PARAM "terminal = '$term'\n";
print PARAM "mapname = '$mapname'\n";
print PARAM "background_image = '$background'\n";
print PARAM "use_shapefile = $use_shapefile\n";
print PARAM "linewidth = $linewidth\n";
print PARAM "show_grid = $grid\n";
print PARAM "show_border = $border\n";
print PARAM "datafiles = '$datafiles'\n";
print PARAM "shapefiles = '$shapefiles'\n";
print PARAM "ls_list = '$ls_list'\n";
print PARAM "ps_list = '$ps'\n";
print PARAM "pt_list = '$pt'\n";
close PARAM;

system "echo >> fred_make_maps.log";
system "cat $paramsfile >> fred_make_maps.log";
system "echo >> fred_make_maps.log";

$cmd = "gnuplot -e \'load \"$paramsfile\" \' $FRED/bin/fred_map 2\>\> fred_make_maps.log"; 
system "echo $cmd >> fred_make_maps.log";
system "$cmd";
system "echo >> fred_make_maps.log";

if ($display) {
  system "open $mapname";
}

exit;

##################################################

sub get_ls_list {
  my $color_list = shift;
  my $ls_list = "";
  my @x = split " ", $color_list;
  for my $c (@x) {
    #  print "c = |$c|\n";
    $ls_list .= "$ls{$c} " if exists $ls{$c};
    $ls_list .= "1 " if not exists $ls{$c};
  }
  return $ls_list;
}

##################################################


sub make_bbox {
  my $bbfiles = "$shapefiles $datafiles";
  $xmin = 9999;
  $ymin = 9999;
  $xmax = -999;
  $ymax = -999;
  if ($shapefiles eq "") {
    open FH, "../BBOX" or die "$0: Can't open file VIS/BBOX";
    my $line = <FH>;
    chomp $line;
    ($ymin) = $line =~ /= (.*)/;
    $line = <FH>;
    chomp $line;
    ($xmin) = $line =~ /= (.*)/;
    $line = <FH>;
    chomp $line;
    ($ymax) = $line =~ /= (.*)/;
    $line = <FH>;
    chomp $line;
    ($xmax) = $line =~ /= (.*)/;
    close FH;
  }
  else {
    my @files = split " ", $bbfiles;
    for my $file (@files) {
      return if not (-e $file);
      open FH, $file or die "$0: Can't open file $file\n";
      while (my $line = <FH>) {
	chomp $line;
	my ($y, $x) = split " ", $line;
	# print "$file: x = $x y = $y\n";
	$xmin = $x if $x < $xmin;
	$xmax = $x if $x > $xmax;
	$ymin = $y if $y < $ymin;
	$ymax = $y if $y > $ymax;
      }
      close FH;
    }
  }
  # print "11 $xmin $xmax $ymin $ymax\n";
  
  my $xrng = $xmax - $xmin;
  my $yrng = $ymax - $ymin;
  
  # add some space on each side;
  $xmin = $xmin - 0.075*$xrng;
  $xmax = $xmax + 0.075*$xrng;
  $ymin = $ymin - 0.025*$yrng;
  $ymax = $ymax + 0.025*$yrng;
  # print "22 $xmin $xmax $ymin $ymax\n";
  
  if ($force_xmin) { $xmin = $force_xmin };
  if ($force_xmax) { $xmax = $force_xmax };
  if ($force_ymin) { $ymin = $force_ymin };
  if ($force_ymax) { $ymax = $force_ymax };
  # print "33 $xmin $xmax $ymin $ymax\n";

  # earth geometry;
  my $pi = 3.14159265358979;
  my $km_per_deg_lat = 111.325;
  my $mean_lat = ($ymax + $ymin) / 2.0;
  my $km_per_deg_lon = cos($mean_lat * $pi / 180.0) * $km_per_deg_lat;
  my $lat_lon_ratio = 0.9 * $km_per_deg_lon / $km_per_deg_lat;

  # printf "x mean latitude = %0.5f\n", $mean_lat;
  # printf "x km_per_deg_lat = %0.5f\n", $km_per_deg_lat;
  # printf "x km_per_deg_lon = %0.5f\n", $km_per_deg_lon;
  # printf "x lat_lon_ratio = %0.5f\n", $lat_lon_ratio;

  for my $i (1..5) {
    # find the x and y bbox;
    $xrng = $xmax - $xmin;
    $yrng = $ymax - $ymin;
    
    # adjust the x range if too small;
    my $xtarg = $yrng / $lat_lon_ratio;
    my $xxtra = ($xrng < $xtarg)? ($xtarg - $xrng)*0.5 : 0;
    $xmin = $xmin - $xxtra;
    $xmax = $xmax + $xxtra;
    
    # adjust the y range if too small;
    my $ytarg = $lat_lon_ratio * $xrng;
    my $yxtra = ($yrng < $ytarg)? ($ytarg - $yrng)*0.5 : 0;
    $ymin = $ymin - $yxtra;
    $ymax = $ymax + $yxtra;
    # print "44 $xmin $xmax $ymin $ymax\n";
  }

  # save the bbox to a file;
  # print "writing bbox to  BBOX";
  # print $xmin, $xmax, $ymin, $ymax;
  open FH,">BBOX";
  printf FH "ymin = %0.6f\n", $ymin;
  printf FH "xmin = %0.6f\n", $xmin;
  printf FH "ymax = %0.6f\n", $ymax;
  printf FH "xmax = %0.6f\n", $xmax;
  close FH;
}

