#!/usr/bin/perl

##########################################################################################
## 
##  This file is part of the FRED system.
##
## Copyright (c) 2010-2012, University of Pittsburgh, John Grefenstette, Shawn Brown, 
## Roni Rosenfield, Alona Fyshe, David Galloway, Nathan Stone, Jay DePasse, 
## Anuroop Sriram, and Donald Burke
## All rights reserved.
##
## Copyright (c) 2013-2021, University of Pittsburgh, John Grefenstette, Robert Frankeny,
## David Galloway, Mary Krauland, Michael Lann, David Sinclair, and Donald Burke
## All rights reserved.
##
## FRED is distributed on the condition that users fully understand and agree to all terms of the 
## End User License Agreement.
##
## FRED is intended FOR NON-COMMERCIAL, EDUCATIONAL OR RESEARCH PURPOSES ONLY.
##
## See the file "LICENSE" for more information.
##
##########################################################################################

use strict;
use warnings;
use Env;
use Cwd;
use Fcntl qw(:flock);
use Getopt::Std;
use POSIX qw/ceil/;
$| = 1;  # AUTO_FLUSH

# File: run_fred
# Author: John Grefenstette
# Created: Apr 7, 2011
# Updated: Mar 17, 2019

# get current working directory
my $cwd = getcwd();

my $FRED = $ENV{FRED_HOME};
die "run_fred: Please set environmental variable FRED_HOME to location of FRED home directory\n" if not $FRED;

my $usage = "usage: run_fred -d dir -p model.fred -s start_run -n end_run\n";

my @arg = @ARGV;

# get command line arguments
my %options = ();
getopts("d:p:s:n:t:C", \%options);

my $paramsfile = "";
$paramsfile = $options{p} if exists $options{p};
$paramsfile = "model.fred" if not $paramsfile;
$paramsfile = "params" if not -e $paramsfile;
die $usage if $paramsfile =~ /[\"\';]/;

my $compile = 1;
$compile = 0 if exists $options{C};

if ($compile) {
  # run the compiler and terminate if any errors
  my $tmp_dir = ".tmp_dir-$$";
  mkdir $tmp_dir or die "$0: cannot make tmp_dir for fred_compile\n";
  system "$FRED/bin/fred_compile -p $paramsfile -d $tmp_dir";
  if (-e "$tmp_dir/errors.txt") {
    system "rm -rf $tmp_dir";
    exit;
  }
  else {
    system "rm -rf $tmp_dir";
  }
}

my $dir = "";
$dir = $options{d} if exists $options{d};
die $usage if $dir =~ /[\"\';]/;
if ($dir eq "") {
  $dir = get_param_value("outdir", $paramsfile);
}
if (not -d $dir) { mkdir $dir }

if (not(-e $paramsfile)) {
  $paramsfile = "params";
  print "$0: fred program not found\n";
  die $usage;
}

`cp $paramsfile $dir` if $dir ne ".";

my $start_run = 1;
$start_run = $options{s} if exists $options{s};
die $usage if $start_run =~ /\D/;

my $end_run = $start_run;
$end_run = $options{n} if exists $options{n};
die $usage if $start_run =~ /\D/;
$end_run = $start_run if $end_run < $start_run;
die $usage if $end_run =~ /\D/;

my $threads = 1;
$threads = $options{t} if exists $options{t};
my $set_threads = "export OMP_NUM_THREADS=$threads";

my $cmd = "'run_fred @arg'";
system "echo $cmd > $dir/COMMAND_LINE";
for my $r ($start_run .. $end_run) {
  my $rundir = "$dir/RUN$r";
  # print "rundir = $rundir\n";
  if (not -d $rundir) { mkdir $rundir }
  $cmd = "($set_threads ; FRED -p $paramsfile -r $r -d $dir 2>&1 > $rundir/LOG)";
  print "$cmd\n";
  system $cmd;
}


sub get_param_value {
  my ($param, $paramsfile) = @_;
  # print "get_param_value: $param $paramsfile\n";

  # get last line from params files that starts with the given parameter

  # find config file
  my $config = "config.fred";
  if (not -e $config) {
    $config = "$FRED/data/config.fred";
  }
  if (not -e $config) {
    die "$0: could not find config file\n";
  }

  # add escape characters so that grep work for indexed parameters
  $param =~ s/\[/\\[/g;
  $param =~ s/\-/\\-/g;

  my $val = "";
  open PAR,"$config" or die "$0: ERROR READING $config\n";
  while (my $line = <PAR>) {
    if ($line =~ /^$param\s*=/) {
      ($val) = $line =~ /=\s*(.*?)\s*$/; 
      $val =~ s/\s*\#.*//;
      $val =~ s/\s*;.*//g;
      chomp $val;
    }
  }
  close PAR;

  open PAR,"$paramsfile" or die "$0: ERROR READING $paramsfile\n";
  while (my $line = <PAR>) {
    if ($line =~ /^$param\s*=/) {
      ($val) = $line =~ /=\s*(.*?)\s*$/; 
      $val =~ s/\s*\#.*//;
      $val =~ s/\s*;.*//g;
      chomp $val;
    }
  }
  close PAR;
  # print "$param val = |$val|\n";
  return $val;
}

